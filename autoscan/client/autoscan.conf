# This is the configuration file for autoscan.sh
#
# Lines starting with '#' are interpreted as comments. Blank lines are ignored.
# All valid configuration parameters are shown below. Lines starting with
# parameters not recognized by the program will be ignored.
#
# Commandline parameters ALWAYS have priority over values specified in this
# file. Keep that in mind when something is not (but should be) working.
#
# There's no need to delimit values using single or double-quotes, though you
# can. They will be ignored. Special attention when using quotes on the
# PKI_PASS parameter, as they will NOT be ignored in that particular case,
# since the password could contain quotes.
#


# SSH server to be used when generating executables. This should probably be
# the public IP of your SSH server, which clients will use to connect back to
# you.
#
# Default value: unset
#
#SSH_SERVER = 192.168.0.1


# SSH server listening port. Remember to set this parameter if your SSH server
# is listening in a non-standard port.
#
# Default value: 22
#
#PORT = 22


# Username clients will use to connect back to your SSH server. You can specify
# a fixed username in this parameter, which will be used for all generated
# executables, SSH keys and filenames.
#
# Alternatively, you can create one user per client connecting back (or one
# user per group of clients, it's your choice really), in which case you should
# leave this parameter unset and use the commandline flag option.
#
# Default value: unset
#
#USERNAME = john


# Informative string used to identify client hostnames. This parameter is used
# to generate filenames/SSH keys, and could be useful to differentiate clients
# connecting back.
#
# By default, the 'host' string will be used. Do note that using the same
# username/hostname combo for all clients will generate identical filenames,
# and special attention should be taken with the TARGET parameter to avoid
# overwriting files.
# 
# Default value: host
#
#CLIENT_HOSTNAME = host


# Target directory to which files will be copied when clients connect back.
# This can be a fixed directory in the filesystem (for example, /tmp), or you
# can use the special variables $user and $chost to expand values for USERNAME
# and CLIENT_HOSTNAME, respectively. You can precede those variables with the
# special character '~' (tilde), which expands to $user or $chost home
# directories.
#
# Do note that directories will NOT be created if they don't exist, so make
# sure your variable expansions are pointing to valid targets.
#
# Default value: ~$user
#
#TARGET = ~$user


# Checksum digest algorithm to be used when producing checksums of generated
# executables. Avoid using MD5 if at all possible, as the SHA alternatives
# are less prone to collisions and security issues.
#
# Accepted values: md5, sha1, sha224, sha256 sha384, sha512
#
# Default value: sha512
#
#CHECKSUM = sha512


# Path to the certificate that will be used to sign executables. This
# certificate must be in X.509 format, identical to what
# 'openssl x509 -req' would generate.
#
# Default value: unset
#
#PKI_CERT =


# Path to the private key that will be used to sign executables. Like the
# PKI_CERTIFICATE parameter above, this key must be in a format identical to
# what 'openssl genpkey' would generate.
#
# Default value: unset
#
#PKI_KEY =


# !!! BEWARE !!!
#
# Password that should be used to decrypt the private key specified by the
# PKI_KEY parameter. Do note that keeping a private key password in a file like
# this, in PLAIN TEXT no less, is extremely risky and bad security practice.
# This option is only offered for convenience when using self-signed
# certificates and for debugging purposes.
#
# We're using '=' as a delimiter, but your password could contain that
# character. In that situation, swap '=' for a character that your password
# does NOT contain, for example:
#
#   PKI_PASS : this=is my=password , or
#   PKI_PASS | this=is,my:password
#
# Default value: unset
#
#PKI_PASS =
